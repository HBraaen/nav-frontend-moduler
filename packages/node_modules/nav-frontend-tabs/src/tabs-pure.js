"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const cn = require("classnames");
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
const tab_1 = require("./tab");
const tabsCls = (props) => cn('nav-frontend-tabs', props.className, {
    'nav-frontend-tabs--kompakt': props.kompakt
});
class TabsPure extends React.PureComponent {
    constructor() {
        super(...arguments);
        this.aktivIndex = 0;
        this.focusIndex = 0;
        this.linkRefs = [];
        this.handleClick = (e, index, customClickHandler) => {
            e.preventDefault();
            if (typeof this.props.onChange === 'function')
                this.props.onChange(e, index);
            if (typeof customClickHandler === 'function')
                customClickHandler(e, index);
        };
        this.handleKeyDown = (e) => {
            let newIndex;
            const modifier = (!this.props.arrowKeysAutoSwitchTabs) ? this.focusIndex : this.aktivIndex;
            const keyCode = e.keyCode || e.which;
            switch (keyCode) {
                case nav_frontend_js_utils_1.keyCodes.right:
                    newIndex = (modifier < (this.getNumTabs() - 1)) ? modifier + 1 : 0;
                    break;
                case nav_frontend_js_utils_1.keyCodes.left:
                    newIndex = (modifier > 0) ? modifier - 1 : this.getNumTabs() - 1;
                    break;
            }
            if (newIndex === undefined)
                return;
            if (!this.props.arrowKeysAutoSwitchTabs) {
                this.linkRefs[newIndex].focus();
            }
            else {
                if (typeof this.props.onChange === 'function')
                    this.props.onChange(e, newIndex);
            }
        };
    }
    getNumTabs() {
        if (this.props.children)
            return React.Children.count(this.props.children);
        return (this.props.tabs) ? this.props.tabs.length : 0;
    }
    renderTabs() {
        if (this.props.children) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    const aktiv = child.props['aktiv'];
                    if (aktiv)
                        this.aktivIndex = i;
                    return React.cloneElement(child, {
                        onClick: (e) => this.handleClick(e, i, child.props['onClick']),
                        onKeyDown: (e) => this.handleKeyDown(e),
                        linkRef: (button) => this.linkRefs[i] = button,
                        onFocus: () => this.focusIndex = i
                    });
                }
            });
        }
        if (this.props.tabs) {
            return this.props.tabs.map((tab, i) => {
                if (tab.aktiv)
                    this.aktivIndex = i;
                return (React.createElement(tab_1.default, Object.assign({ key: nav_frontend_js_utils_1.guid(), onClick: (e) => this.handleClick(e, i, tab.onClick), onKeyDown: (e) => this.handleKeyDown(e), linkRef: (button) => this.linkRefs[i] = button, onFocus: () => this.focusIndex = i }, tab)));
            });
        }
    }
    render() {
        const domProps = nav_frontend_js_utils_1.omit(this.props, 'children', 'className', 'tabs', 'kompakt', 'arrowKeysAutoSwitchTabs');
        return (React.createElement("div", Object.assign({ className: tabsCls(this.props) }, domProps),
            React.createElement("ul", { className: "nav-frontend-tabs__tab-list", role: "tablist" }, this.renderTabs())));
    }
}
TabsPure.Tab = tab_1.default;
TabsPure.defaultProps = {
    kompakt: false,
    arrowKeysAutoSwitchTabs: true
};
exports.default = TabsPure;
//# sourceMappingURL=tabs-pure.js.map