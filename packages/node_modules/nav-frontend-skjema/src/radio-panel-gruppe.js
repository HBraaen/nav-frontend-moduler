"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const PT = require("prop-types");
const classNames = require("classnames");
require("nav-frontend-skjema-style");
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
const _1 = require("./");
const skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding");
class RadioPanel extends React.Component {
    constructor(props) {
        super(props);
        this.state = { hasFocus: false };
    }
    toggleOutline() {
        this.setState({ hasFocus: !this.state.hasFocus });
    }
    render() {
        const { id, checked, disabled, label, name, onChange, inputProps } = this.props;
        const { hasFocus } = this.state;
        const inputId = id || nav_frontend_js_utils_1.guid();
        const cls = classNames('inputPanel radioPanel', {
            'inputPanel--checked': checked && !disabled,
            'inputPanel--focused': hasFocus && !disabled,
            'inputPanel--disabled': disabled === true
        });
        return (React.createElement("label", { className: cls, htmlFor: inputId },
            React.createElement("input", Object.assign({}, inputProps, { id: inputId, className: "inputPanel__field", type: "radio", name: name, checked: checked, "aria-checked": checked, disabled: disabled, onFocus: () => this.toggleOutline(), onBlur: () => this.toggleOutline(), onChange: (event) => onChange(event) })),
            React.createElement("span", { className: "inputPanel__label" }, label)));
    }
}
exports.RadioPanel = RadioPanel;
class RadioPanelGruppe extends React.Component {
    render() {
        const { radios, name, legend, feil, checked, onChange } = this.props;
        return (React.createElement(_1.SkjemaGruppe, { className: "inputPanelGruppe", feil: feil },
            React.createElement(_1.Fieldset, { legend: legend }, radios.map((radio) => (React.createElement(RadioPanel, Object.assign({ name: name, key: `${name}-${radio.value}`, checked: checked === radio.value, onChange: (event) => onChange(event, radio.value) }, radio)))))));
    }
}
RadioPanelGruppe.propTypes = {
    radios: PT.array.isRequired,
    name: PT.string.isRequired,
    legend: PT.string.isRequired,
    onChange: PT.func.isRequired,
    feil: skjemaelement_feilmelding_1.skjemaelementFeilmeldingShape
};
RadioPanelGruppe.defaultProps = {
    feil: undefined
};
exports.default = RadioPanelGruppe;
//# sourceMappingURL=radio-panel-gruppe.js.map