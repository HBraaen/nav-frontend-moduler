import * as React from 'react';
declare var require: any;

const ReactAutocomplete = require("react-autocomplete");

interface AutocompleteItem {
	displayName: string;
	key?: string|number;
	value?: string|number;
	content?: any;
}

interface AutocompleteProps {
	items: AutocompleteItem[];
	onBlur?: () => void;
}

export class Autocomplete extends React.Component<{}, {}> {

	handleInputBlur() {
		console.warn("todo handleInputBlur()");
	}

	handleInputFocus() {
		console.warn("todo handleInputFocus()");
	}

	renderMenu(children: any): React.ReactNode {
		return (
			<div
				className="menu"
				role="listbox"
				id="owned_listbox"
			>
				{children}
			</div>
		);
	}

	getRenderItem(item: any, isHighlighted: any) {
		return (
			<a
				className={`item ${isHighlighted ? "item-highlighted" : ""}`}
				key={Math.random()}
			>{this.formaterAdresseString(item)}</a>
		);
	}

	render() {
		let value = "";
		return (
			<div>Auto complete:
				<ReactAutocomplete
					inputProps={{
						id: "states-autocomplete",
						placeholder: "",
						"aria-owns": "owned_listbox",
						onBlur: () => this.handleInputBlur(),
						onFocus: () => this.handleInputFocus()
					}}
					wrapperStyle={{position: "relative", display: "inline-block"}}

					getItemValue={(item) => item.label}
					items={[
						{ label: 'apple' },
						{ label: 'banana' },
						{ label: 'pear' }
					]}
					renderItem={(item, isHighlighted) =>
						<div
							key={Math.random()}
							style={{ background: isHighlighted ? 'lightgray' : 'white' }}
						>
							{item.label}
						</div>
					}
					value={value}
					onChange={(e) => value = e.target.value}
					onSelect={(val) => value = val}
				/>
			</div>
		);
	}
}

export default Autocomplete;
