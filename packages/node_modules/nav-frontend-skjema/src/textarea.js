"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PT = require("prop-types");
const React = require("react");
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
require("nav-frontend-skjema-style");
const classNames = require("classnames");
const skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding"); // tslint:disable-line:max-line-length
const inputCls = (className, harFeil) => classNames(className, 'skjemaelement__input textarea--medMeta', { 'skjemaelement__input--harFeil': harFeil });
/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends React.Component {
    constructor(props) {
        super(props);
        nav_frontend_js_utils_1.autobind(this);
    }
    componentDidMount() {
        nav_frontend_js_utils_1.requestAnimationFrame.call(window, this.updateHeight, 0);
    }
    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.updateHeight();
        }
    }
    updateHeight() {
        if (this.mirror && this.tekstomrade) {
            this.mirror.textContent = `${this.tekstomrade.value} `;
            // eslint-disable-next-line no-param-reassign
            this.tekstomrade.style.height = `${this.mirror.offsetHeight + 25}px`;
        }
    }
    renderTextareaElement(textareaRef, textareaClass, feil, textareaId, name, onChange, other) {
        return (React.createElement("textarea", Object.assign({ ref: (textarea) => {
                this.tekstomrade = textarea;
                if (textareaRef !== undefined)
                    textareaRef(textarea);
            }, onChange: onChange, className: inputCls(textareaClass, feil), type: "text", id: textareaId, name: name, style: { height: '30px' } }, other)));
    }
    render() {
        const { label, maxLength, textareaClass, id, name, feil, tellerTekst, textareaRef, onChange, ...other } = this.props;
        const textareaId = id || name || nav_frontend_js_utils_1.guid();
        const antallTegn = other.value.length;
        const textareaEl = this.renderTextareaElement(textareaRef, textareaClass, feil, textareaId, name, onChange, other);
        return (React.createElement("div", { className: "skjemaelement textarea__container" },
            React.createElement("label", { className: "skjemaelement__label", htmlFor: textareaId }, label),
            React.createElement("div", { className: "textarea--medMeta__wrapper" },
                React.createElement(nav_frontend_js_utils_1.EventThrottler, { event: "resize", callback: this.updateHeight, delay: 100 }, textareaEl),
                React.createElement("p", { className: "textarea--medMeta__teller" }, tellerTekst(antallTegn || 0, maxLength))),
            React.createElement(skjemaelement_feilmelding_1.default, { feil: feil }),
            React.createElement("div", { className: "textareamirror", ref: (mirror) => { this.mirror = mirror; }, "aria-hidden": "true" })));
    }
}
Textarea.propTypes = {
    /**
     * Ledetekst for tekstområdet
     */
    label: PT.node.isRequired,
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength: PT.number,
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: PT.string.isRequired,
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass: PT.string,
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id: PT.string,
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name: PT.string,
    /**
     * Optional onChange handler
     */
    onChange: PT.func.isRequired,
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil: skjemaelement_feilmelding_1.skjemaelementFeilmeldingShape,
    /**
     * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
     */
    tellerTekst: PT.func,
    /**
     * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
     */
    textareaRef: PT.func
};
Textarea.defaultProps = {
    maxLength: 2000,
    textareaClass: '',
    id: undefined,
    name: undefined,
    feil: undefined,
    tellerTekst: defaultTellerTekst,
    textareaRef: undefined
};
function defaultTellerTekst(antallTegn, maxLength) {
    const difference = antallTegn - maxLength;
    const remainingLetters = maxLength - antallTegn;
    const ariaAttrs = {};
    if (antallTegn > maxLength) {
        ariaAttrs['aria-live'] = 'assertive';
        return React.createElement("span", Object.assign({}, ariaAttrs),
            "Du har ",
            difference,
            " tegn for mye");
    }
    if (remainingLetters === 5 || remainingLetters === 10 || remainingLetters === 0) {
        ariaAttrs['aria-live'] = 'polite';
    }
    return React.createElement("span", Object.assign({}, ariaAttrs),
        "Du har ",
        remainingLetters,
        " tegn igjen");
}
exports.default = Textarea;
//# sourceMappingURL=textarea.js.map