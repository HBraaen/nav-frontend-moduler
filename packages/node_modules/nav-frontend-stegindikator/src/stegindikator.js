"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const cn = require("classnames");
const stegindikator_steg_1 = require("./stegindikator-steg");
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
require("nav-frontend-stegindikator-style");
const cls = (state) => cn('stegindikator', {
    'stegindikator--kompakt': state.kompakt
});
class Stegindikator extends React.Component {
    constructor(props) {
        super(props);
        this.handleClick = (e, index) => {
            e.preventDefault();
            if (!this.props.onBeforeChange || this.props.onBeforeChange(index)) {
                this.setState({
                    aktivtSteg: index
                });
                // tslint:disable-next-line:no-unused-expression
                if (typeof this.props.onChange === 'function')
                    this.props.onChange(index);
            }
        };
        this.canShowLabel = () => {
            const dim = this.getDimensions();
            return dim.container >= dim.visLabelWidth && this.props.visLabel;
        };
        this.canBeNormal = () => {
            const dim = this.getDimensions();
            return dim.container >= dim.normalWidth && !this.props.kompakt;
        };
        this.adjustSize = () => {
            this.setState({
                visLabel: this.canShowLabel(),
                kompakt: !this.canBeNormal()
            });
        };
        let initialAktivtSteg;
        if (this.props.aktivtSteg !== undefined) {
            initialAktivtSteg = this.props.aktivtSteg;
        }
        else {
            initialAktivtSteg = this.getDefaultActiveStegIndex();
        }
        this.state = {
            aktivtSteg: initialAktivtSteg,
            visLabel: props.visLabel,
            kompakt: props.kompakt
        };
        if (props.autoResponsiv) {
            window.addEventListener('resize', this.adjustSize);
        }
    }
    componentDidMount() {
        if (this.props.autoResponsiv) {
            this.adjustSize();
        }
    }
    componentWillReceiveProps(nextProps) {
        if (!this.props.autoResponsiv && nextProps.autoResponsiv) {
            window.addEventListener('resize', this.adjustSize);
        }
        if (nextProps.autoResponsiv) {
            this.setState({
                visLabel: (this.canShowLabel()) ? nextProps.visLabel : false,
                kompakt: nextProps.kompakt || !this.canBeNormal()
            });
        }
        else {
            this.setState({
                visLabel: nextProps.visLabel,
                kompakt: nextProps.kompakt
            });
        }
        if (nextProps.aktivtSteg !== undefined && nextProps.aktivtSteg !== this.state.aktivtSteg) {
            this.setState({
                aktivtSteg: nextProps.aktivtSteg
            });
        }
    }
    componentWillUnmount() {
        window.removeEventListener('resize', this.adjustSize);
    }
    getDefaultActiveStegIndex() {
        let index;
        if (this.props.children) {
            React.Children.forEach(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    const clone = React.cloneElement(child);
                    if (clone.props['aktiv']) {
                        index = i;
                    }
                }
            });
        }
        else {
            index = this.props.steg.findIndex((steg) => !!steg.aktiv);
        }
        return (index !== -1) ? index : 0;
    }
    getNumSteg() {
        if (this.props.children) {
            return React.Children.toArray(this.props.children).filter((child) => React.isValidElement(child)).length;
        }
        return this.props.steg.length;
    }
    getDimensions() {
        const numSteg = this.getNumSteg();
        const remSize = parseFloat(String(getComputedStyle(document.documentElement).fontSize));
        const margin = remSize * 1.25;
        const marginTotal = (margin * numSteg) - margin;
        const visLabelWidth = ((remSize * 10) * numSteg) + marginTotal;
        const normalWidth = ((remSize * 2) * numSteg) + marginTotal;
        return {
            visLabelWidth,
            normalWidth,
            container: this.list.getBoundingClientRect().width
        };
    }
    renderSteg() {
        const onClick = (i) => (typeof this.props.onChange === 'function') ? (e) => this.handleClick(e, i) : undefined;
        if (this.props.children) {
            return React.Children.map(this.props.children, (child, i) => {
                if (React.isValidElement(child)) {
                    return React.cloneElement(child, {
                        index: child.props['index'] || i,
                        aktiv: i === this.state.aktivtSteg,
                        ferdig: child.props['ferdig'] || i < this.state.aktivtSteg,
                        onClick: (!child.props['disabled']) ? onClick(i) : undefined,
                        visLabel: this.state.visLabel
                    });
                }
                return child;
            });
        }
        return this.props.steg.map((steg, i) => {
            const stegDomProps = nav_frontend_js_utils_1.omit(steg, 'label', 'aktiv', 'ferdig', 'visLabel', 'index', 'onClick');
            const ferdig = steg.ferdig || i < this.state.aktivtSteg;
            const aktiv = i === this.state.aktivtSteg;
            return (React.createElement(stegindikator_steg_1.default, Object.assign({ index: i, label: steg.label, visLabel: this.state.visLabel, key: `${steg.label.split(' ').join('')}`, aktiv: aktiv, ferdig: ferdig, onClick: (!steg.disabled) ? onClick(i) : undefined }, stegDomProps)));
        });
    }
    render() {
        const domProps = nav_frontend_js_utils_1.omit(this.props, 'steg', 'children', 'visLabel', 'kompakt', 'onChange', 'onBeforeChange', 'autoResponsiv', 'aktivtSteg');
        return (React.createElement("div", Object.assign({ className: cls(this.state) }, domProps),
            React.createElement("ol", { className: "stegindikator__liste", ref: (list) => { this.list = list; } }, this.renderSteg())));
    }
}
Stegindikator.Steg = stegindikator_steg_1.default;
Stegindikator.defaultProps = {
    steg: [],
    visLabel: false,
    kompakt: false,
    autoResponsiv: false
};
exports.default = Stegindikator;
//# sourceMappingURL=stegindikator.js.map