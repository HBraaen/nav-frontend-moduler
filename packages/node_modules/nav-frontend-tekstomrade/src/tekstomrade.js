"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PT = require("prop-types");
const React = require("react");
const nav_frontend_typografi_1 = require("nav-frontend-typografi");
const fragments_1 = require("./fragments");
const uriRegex = /((?:[\w-]+:\/\/?|www(?:-\w+)?\.)[^\s()<>]+\w)/g;
const notNull = (element) => element !== null;
function tilJSXLenke(fragment, fragmentIndex) {
    const urimatch = uriRegex.exec(fragment);
    if (urimatch === null) {
        return React.createElement(fragments_1.SpanFragment, { key: fragmentIndex }, fragment);
    }
    return React.createElement(fragments_1.LenkeFragment, { key: fragmentIndex, href: urimatch[0] });
}
function leggTilLenkerJSX(innhold) {
    const fragments = innhold.split(uriRegex);
    if (fragments.length === 1) {
        const text = fragments[0];
        if (!text || text.length === 0) {
            return null;
        }
        return (React.createElement(fragments_1.SpanFragment, null, text));
    }
    return fragments
        .map(tilJSXLenke)
        .filter(notNull);
}
function tilAvsnitt(avsnitt, index, list) {
    return (React.createElement(nav_frontend_typografi_1.Normaltekst, { className: index < list.length - 1 ? 'blokk-xs' : '', key: index }, avsnitt));
}
class Tekstomrade extends React.Component {
    render() {
        const { children, ingenFormattering, ...props } = this.props;
        const tekst = children;
        const avsnitt = ingenFormattering ? tekst : tekst.split(/[\r\n]+/)
            .map(leggTilLenkerJSX)
            .filter(notNull)
            .map(tilAvsnitt);
        return React.createElement("div", Object.assign({}, props), avsnitt);
    }
}
Tekstomrade.propTypes = {
    children: PT.string,
    ingenFormattering: PT.bool
};
Tekstomrade.defaultProps = {
    children: '',
    ingenFormattering: false
};
exports.default = Tekstomrade;
//# sourceMappingURL=tekstomrade.js.map