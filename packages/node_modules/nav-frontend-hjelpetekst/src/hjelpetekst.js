"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const PT = require("prop-types");
const classNames = require("classnames");
const nav_frontend_typografi_1 = require("nav-frontend-typografi");
require("nav-frontend-hjelpetekst-style");
const nav_frontend_ikoner_assets_1 = require("nav-frontend-ikoner-assets");
const DefaultAnchor = ({ className, hover }) => (React.createElement(nav_frontend_ikoner_assets_1.default, { kind: hover ? 'help-circle_hover' : 'help-circle', className: className }));
DefaultAnchor.propTypes = {
    className: PT.string.isRequired,
    hover: PT.bool.isRequired
};
const cls = (type, className) => classNames('hjelpetekst__tooltip', className, {
    'hjelpetekst__tooltip--over': type === 'over',
    'hjelpetekst__tooltip--under': type === 'under' || type === 'under-hoyre',
    'hjelpetekst__tooltip--hoyre': type === 'hoyre',
    'hjelpetekst__tooltip--venstre': type === 'venstre',
    'hjelpetekst__tooltip--midtstilt': type === 'midt',
    'hjelpetekst__tooltip--under-venstre': type === 'under-venstre'
});
class HjelpetekstBase extends React.Component {
    constructor(props) {
        super(props);
        this.toggleSynlighet = this.toggleSynlighet.bind(this);
        this.stateChange = this.stateChange.bind(this);
        this.toggleKeyListener = this.toggleKeyListener.bind(this);
        this.handleDocumentKeyDown = this.handleDocumentKeyDown.bind(this);
        this.renderContent = this.renderContent.bind(this);
        this.handleHjelpetekstBlur = this.handleHjelpetekstBlur.bind(this);
        this.state = {
            erSynlig: false,
            hover: false,
            focus: false,
            active: false,
            variant: 'over'
        };
    }
    componentWillUpdate(nextProps, nextState) {
        if (nextState.erSynlig && nextState.erSynlig !== this.state.erSynlig) {
            this.setVariant();
        }
    }
    setVariant() {
        const LIMIT = 330;
        const toggle = this.apneKnapp;
        if (toggle) {
            const rect = toggle.getBoundingClientRect();
            const right = window.innerWidth - rect.right;
            if (right < LIMIT) {
                if (right < LIMIT / 2) {
                    this.setState({
                        variant: 'venstre'
                    });
                }
                else {
                    this.setState({
                        variant: 'midt'
                    });
                }
            }
            else {
                this.setState({
                    variant: 'over'
                });
            }
        }
    }
    getAriaId() {
        return `tooltip-${this.props.id}`;
    }
    getVariant() {
        if (!this.props.type || this.props.type === 'auto') {
            return this.state.variant;
        }
        return this.props.type;
    }
    handleDocumentKeyDown(event) {
        if (event && event.key === 'Escape') {
            this.toggleSynlighet(event);
        }
    }
    handleHjelpetekstBlur(evt) {
        if (!this.state.erSynlig) {
            return;
        }
        window.setTimeout(() => {
            const focusElement = document.activeElement;
            if (focusElement === this.hjelpetekstInnhold ||
                focusElement === this.lukkKnapp ||
                focusElement === this.apneKnapp ||
                (this.hjelpetekstInnhold.contains && this.hjelpetekstInnhold.contains(focusElement))) {
                return;
            }
            this.setState({
                erSynlig: false
            });
        }, 0); // tslint:disable-line:align
    }
    toggleSynlighet(event) {
        event.preventDefault();
        event.stopPropagation();
        const erSynlig = !this.state.erSynlig;
        this.setState({
            erSynlig
        }, () => (this.state.erSynlig ? this.hjelpetekstInnhold.focus() : this.apneKnapp.focus()));
        this.toggleKeyListener(erSynlig);
    }
    toggleKeyListener(erSynlig) {
        if (erSynlig) {
            document.addEventListener('keydown', this.handleDocumentKeyDown);
        }
        else {
            document.removeEventListener('keydown', this.handleDocumentKeyDown);
        }
    }
    stateChange(state, value) {
        return () => this.setState({ [state]: value });
    }
    renderContent() {
        return (React.createElement("div", { onBlur: this.handleHjelpetekstBlur, tabIndex: -1, id: this.getAriaId(), role: "tooltip", ref: (div) => {
                this.hjelpetekstInnhold = div;
            }, className: cls(this.getVariant(), this.props.className) },
            React.createElement("div", { className: "hjelpetekst__tekst" },
                React.createElement(nav_frontend_typografi_1.Normaltekst, null, this.props.children)),
            React.createElement("button", { ref: (button) => {
                    this.lukkKnapp = button;
                }, className: "lukknapp lukknapp--hvit", "aria-controls": this.getAriaId(), "aria-label": "Lukk hjelpetekst", onClick: this.toggleSynlighet }, "Lukk hjelpetekst")));
    }
    render() {
        const Hjelpetekst = this.state.erSynlig ? this.renderContent() : null;
        const Anchor = this.props.anchor;
        const ariaId = this.getAriaId();
        return (React.createElement("div", { className: "hjelpetekst" },
            React.createElement("button", { type: "button", ref: (button) => {
                    this.apneKnapp = button;
                }, className: "hjelpetekst__apneknapp", onClick: this.toggleSynlighet, onMouseEnter: this.stateChange('hover', true), onMouseLeave: this.stateChange('hover', false), onFocus: this.stateChange('focus', true), onBlur: (event) => {
                    this.stateChange('focus', false);
                    this.handleHjelpetekstBlur(event);
                }, onMouseDown: this.stateChange('active', true), onMouseUp: this.stateChange('active', false), title: this.props.tittel, "aria-label": this.props.tittel, "aria-pressed": this.state.erSynlig, "aria-describedby": this.state.erSynlig ? ariaId : undefined },
                React.createElement("span", { className: "sr-only" }, this.props.tittel),
                React.createElement(Anchor, { className: "hjelpetekst__anchor", hover: this.state.hover, focus: this.state.focus, active: this.state.active })),
            Hjelpetekst));
    }
}
HjelpetekstBase.propTypes = {
    children: PT.node.isRequired,
    type: PT.oneOf(['over', 'under', 'hoyre', 'venstre', 'midt', 'auto', 'under-venstre', 'under-hoyre']),
    tittel: PT.string,
    className: PT.string,
    anchor: PT.func,
    id: PT.string.isRequired
};
HjelpetekstBase.defaultProps = {
    tittel: 'Hjelptekst',
    className: undefined,
    anchor: DefaultAnchor,
    id: 'undefined',
    type: 'auto'
};
exports.default = HjelpetekstBase;
var hjelpetekst_over_1 = require("./hjelpetekst-over");
exports.HjelpetekstOver = hjelpetekst_over_1.default;
var hjelpetekst_under_1 = require("./hjelpetekst-under");
exports.HjelpetekstUnder = hjelpetekst_under_1.default;
var hjelpetekst_under_hoyre_1 = require("./hjelpetekst-under-hoyre");
exports.HjelpetekstUnderHoyre = hjelpetekst_under_hoyre_1.default;
var hjelpetekst_under_venstre_1 = require("./hjelpetekst-under-venstre");
exports.HjelpetekstUnderVenstre = hjelpetekst_under_venstre_1.default;
var hjelpetekst_hoyre_1 = require("./hjelpetekst-hoyre");
exports.HjelpetekstHoyre = hjelpetekst_hoyre_1.default;
var hjelpetekst_venstre_1 = require("./hjelpetekst-venstre");
exports.HjelpetekstVenstre = hjelpetekst_venstre_1.default;
var hjelpetekst_midt_1 = require("./hjelpetekst-midt");
exports.HjelpetekstMidt = hjelpetekst_midt_1.default;
var hjelpetekst_auto_1 = require("./hjelpetekst-auto");
exports.HjelpetekstAuto = hjelpetekst_auto_1.default;
//# sourceMappingURL=hjelpetekst.js.map