import * as React from 'react';
import * as PT from 'prop-types';
import * as cn from 'classnames';

import { omit } from 'nav-frontend-js-utils';
import VeilederChatBubble from './veileder-chat-bubble';

import 'nav-frontend-veileder-style'; // eslint-disable-line import/extensions

const cls = (props) => cn('veileder', {
    'veileder--warning': props.type === 'advarsel',
    'veileder--error': props.type === 'feilmelding',
    'veileder--success': props.type === 'suksess'
});

const frameCls = (props) => cn('veileder__frame', {
    'veileder__frame--center': props.center,
    'veileder__frame--transparent': props.transparent,
    'veileder__frame--nomask': props.nomask
});

function getChatBubble(says, veilederSize){
    if (typeof says !== 'undefined' && says) {
        return <VeilederChatBubble says={says} offset={veilederSize} />
    }
}

export interface VeilederProps {
    width?: number;
    children: React.ReactNode | React.ReactChild | React.ReactChildren;
    says?: React.ReactNode | React.ReactChild | React.ReactChildren;
    color?: string;
    transparent?: boolean;
    nomask?: boolean;
    center?: boolean;
    type?: 'normal' | 'suksess' | 'advarsel' | 'feilmelding';
};

interface FrameStyle {
    background?: string;
    width?: number;
    height?: number;
};

class Veileder extends React.Component<VeilederProps> { // eslint-disable-line react/prefer-stateless-function
    render() {
        const {
            children,
            says,
            color,
            transparent,
            width = 230,
            ...other
        } = this.props;

        const domProps = omit(
            { ...other },
            'center',
            'nomask'
        );

        const frameStyles: FrameStyle = {};

        if (!transparent && color) {
            frameStyles.background = color;
        }

        if (width) {
            frameStyles.width = width;
            frameStyles.height = width;
        }

        return (
            <div className={cls(this.props)} {...domProps}>
                <div className={frameCls(this.props)} style={frameStyles}>{children}</div>
                {getChatBubble(says, width)}
            </div>
        );
    }
}

(Veileder as any).propTypes = {
    /**
     * Definerer størrelsen på Avataren. Kan angis helt fritt, og snakkeboblen vil posisjoneres
     * og snakkeboble-pilen vil skalere basert på denne verdien.
     */
    width: PT.number,
    /**
     * Custom SVG-element som illustrerer en figur, f.eks. en av disse:
     * https://app.zeplin.io/project/59831e455850985791bdeb4d/screen/5a7c1fcc36781f9423ab6a0e
     */
    children: PT.node.isRequired,
    /**
     * Tekst eller HTML som rendres i en snakkeboble
     */
    says: PT.node,
    /**
     * Hex-fargecode som definerer bakgrunnsfarge, @navLysGra er default
     */
    color: PT.string,
    /**
     * Skrur av bakgrunnsfargen
     */
    transparent: PT.bool,
    /**
     * Skrur av sirkulær maskering/cropping av children
     */
    nomask: PT.bool,
    /**
     * Skrur av 80% height på children, og rendrer i full høyde (hvis innholdet skal sentreres)
     */
    center: PT.bool,
    /**
     * Predefinerte nøkler for styling av snakkeboblen, avhengig av type budskap.
     */
    type: PT.oneOf(['normal', 'suksess', 'advarsel', 'feilmelding'])
};

(Veileder as any).defaultProps = {
    width: 230,
    transparent: false,
    nomask: false,
    center: false,
    type: 'normal'
};

export default Veileder;
