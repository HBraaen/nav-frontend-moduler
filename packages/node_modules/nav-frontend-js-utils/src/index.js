export function autobind(ctx) {
    Object.getOwnPropertyNames(ctx.constructor.prototype)
        .filter((prop) => typeof ctx[prop] === 'function')
        .forEach((method) => {
            // eslint-disable-next-line
            ctx[method] = ctx[method].bind(ctx);
        });
}

function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString()
        .substring(1);
}

export function guid() {
    return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
}

export function fn(value) {
    return typeof value === 'function' ? value : () => value;
}

export function addPropToObject(obj, [key, value]) {
    obj[key] = value; // eslint-disable-line no-param-reassign
    return obj;
}

export function omit(obj, ...props) {
    return Object.entries(obj)
        .filter(([key]) => !props.includes(key))
        .reduce(addPropToObject, {});
}

function nativeRaf() {
    if (window) {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame;
    }
    return undefined;
}

function polyfillRaf() {
    return (callback, element, delay) => {
        setTimeout(callback, delay || (1000 / 60), new Date().getTime());
    };
}

export const requestAnimationFrame = nativeRaf() || polyfillRaf();

export function clamp(lower, upper, numberish) {
    const number = parseFloat(numberish);
    if (number < lower) return lower;
    if (number > upper) return upper;
    return number;
}

export function isIE() {
    const myNav = navigator.userAgent.toLowerCase();
    return (myNav.indexOf('msie') !== -1) ? parseInt(myNav.split('msie')[1], 10) : false;
}

export function mod11OfNumberWithControlDigit(input) {
    let controlNumber = 2;
    let sumForMod = 0;
    let i;

    for (i = input.length - 2; i >= 0; --i) { // eslint-disable-line no-plusplus
        sumForMod += input.charAt(i) * controlNumber;
        if (++controlNumber > 7) { // eslint-disable-line no-plusplus
            controlNumber = 2;
        }
    }
    const result = (11 - sumForMod % 11); // eslint-disable-line no-mixed-operators
    return result === 11 ? 0 : result;
}

export { EventThrottler } from './eventThrottler';
export * from './validators';
