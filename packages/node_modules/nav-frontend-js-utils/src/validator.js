import { isIE, mod11OfNumberWithControlDigit } from './';

export class Validator { // eslint-disable-line import/prefer-default-export

    constructor(element) {
        this.element = element;
    }

    getValue() {
        const stringValue = this.element.value.toString();

        // Hacky helper function to avoid loop when calling isNumeric()
        function isNumericHelper(value) {
            const n = value.toString().replace(',', '.');
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        if (
            this.element.type === 'number' ||
            (
                isIE() &&
                isIE() <= 9 &&
                isNumericHelper(this.element.value) &&
                this.element.type === 'text'
            )
        ) {
            // Check for decimals
            if (stringValue.indexOf(',') !== -1 || stringValue.indexOf('.') !== -1) {
                return parseFloat(stringValue.replace(',', '.'));
            }
        }
        return this.element.value;
    }

    hasValue() {
        if (this.element.type === 'number') {
            return (this.element.validity.badInput || this.isNumeric());
        } else if (this.element.type === 'select-one') {
            return this.getValue() !== '-1';
        }
        return this.getValue().length !== 0;
    }

    isNumeric() {
        const n = this.getValue().toString().replace(',', '.');
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    isLongerThan(minLength) {
        return this.getValue().length > minLength;
    }

    isShorterThan(maxLength) {
        return this.getValue().length < (maxLength + 1);
    }

    hasLength(length) {
        return this.getValue().toString().length === length;
    }

    hasLengthRange(min, max) {
        const length = this.getValue().toString().length;
        return (length >= min && length <= max);
    }

    isInRange(min, max) {
        const v = this.getValue();
        return (this.isNumeric() && (v >= min) && (v <= max));
    }

    isGT(min) {
        return (this.isNumeric() && this.getValue() >= min);
    }

    isLT(max) {
        return (this.isNumeric() && this.getValue() <= max);
    }

    matchesPattern(pattern, modifiers) {
        return new RegExp(pattern, modifiers).test(this.getValue());
    }

    isEmailFormat(modifiers) {
        // eslint-disable-next-line max-len
        const emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return this.matchesPattern(emailRegex, modifiers);
    }

    isBirthNumFormat() {
        const birthNumber = this.getValue().toString();

        function sumFn(bNum, factors) {
            let sum = 0;
            for (let i = 0, l = factors.length; i < l; ++i) { // eslint-disable-line no-plusplus
                sum += parseInt(bNum.charAt(i), 10) * factors[i];
            }
            return sum;
        }

        let checksum1 = 11 - (sumFn(birthNumber, [3, 7, 6, 1, 8, 9, 4, 5, 2]) % 11);
        if (checksum1 === 11) checksum1 = 0;
        let checksum2 = 11 - (sumFn(birthNumber, [5, 4, 3, 2, 7, 6, 5, 4, 3, 2]) % 11);
        if (checksum2 === 11) checksum2 = 0;
        return checksum1 === parseInt(birthNumber.charAt(9), 10)
                && checksum2 === parseInt(birthNumber.charAt(10), 10);
    }

    isAccountNumFormat() {
        const accountNum = this.getValue().toString();
        return parseInt(accountNum.charAt(accountNum.length - 1), 10)
            === mod11OfNumberWithControlDigit(accountNum);
    }

    isOrgNumFormat() {
        const orgNum = this.getValue().toString();
        return parseInt(orgNum.charAt(orgNum.length - 1), 10)
            === mod11OfNumberWithControlDigit(orgNum);
    }
}
